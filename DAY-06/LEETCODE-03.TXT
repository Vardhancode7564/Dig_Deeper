class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        // unordered_map<char, int>mpp;
        // int maxLen=0,j=0;

        // for (int i=0;i<s.length();i++) {
        //     char ch = s[i];
        //     if(mpp.count(ch)&&mpp[ch]>=j) {
        //         j=lastIndex[ch]+1;
        //     }
        //     mpp[ch]=i;
        //     maxLen=max(maxLen,i-j+1);
        // }

        // return maxLen;
        unordered_set<char>mpp;
        int maxLen=0,i=0,j= 0;

        while (j< s.size()) {
            if (!mpp.count(s[j])) {
                mpp.insert(s[j]);
                maxLen=max(maxLen,j-i+1);
                j++;
            } else {
                mpp.erase(s[i]);
                i++;
            }
        }

        return maxLen;
    }
};