/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *collisinpoint(ListNode *t1,ListNode *t2,int d){
        while(d){
            d--;
            t2=t2->next;
        }
        while(t1!=t2){
            t1=t1->next;
            t2=t2->next;
        }
        return t1;
    }
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
    //     map<ListNode *,int>mpp;
    //    ListNode * temp=headA;
    //     while(temp!=NULL){
    //         mpp[temp]=1;
    //         temp=temp->next;
    //     }
    //     temp=headB;
    //     while(temp!=NULL){
    //         if(mpp.find(temp)!=mpp.end())  return temp;
    //         temp=temp->next;
    //     }
    //     return NULL;
        ListNode* t1 = headA;
        ListNode* t2 = headB;
        int n1 = 0, n2 = 0;

        while (t1) {
            n1++;
            t1 = t1->next;
        }
        while (t2) {
            n2++;
            t2 = t2->next;
        }

        if (n1 < n2) {
            return collisinpoint(headA, headB, n2 - n1);
        } else {
            return collisinpoint(headB, headA, n1 - n2);
        }
    }
};