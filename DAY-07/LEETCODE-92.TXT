/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
     
        if(!head||!head->next) return head;
        ListNode* newHead=reverseList(head->next);
        head->next->next=head;
        head->next=nullptr;

        return newHead;
    }

    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if (!head||left==right) return head;

        ListNode dummy(0);
        dummy.next = head;
        ListNode* prev = &dummy;
        for (int i=1;i<left;i++) {
            prev=prev->next;
        }

        ListNode* nextNode =prev->next;
        ListNode* listNode=nextNode;
        for (int i=left;i<right;i++){
            listNode=listNode->next;
        }
        ListNode* after=listNode->next;
        listNode->next=nullptr; 

        ListNode* newHead=reverseList(nextNode);

        prev->next=newHead;
        nextNode->next=after;

        return dummy.next;
    }
};
